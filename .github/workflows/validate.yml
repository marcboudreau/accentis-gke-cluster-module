name: 'Validate'

on:
  pull_request:

jobs:
  terraform:
    name: 'Validate'
    runs-on: ubuntu-latest
    environment: test

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./testing

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -var commit_hash="${GITHUB_SHA:0:7}"
      working-directory: ./testing
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    # Apply the execution plan with Terraform
    - name: Terraform Apply
      run: terraform apply -auto-approve -var commit_hash="${GITHUB_SHA:0:7}"
      working-directory: ./testing
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
  
    # Install and configure the gcloud tool
    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@master
      with:
        project_id: accentis-288921
        service_account_key: ${{ secrets.GOOGLE_CREDENTIALS }}
        export_default_credentials: true
  
    # Install the kubectl tool
    - name: Setup Kubectl
      uses: yokawasa/action-setup-kube-tools@v0.6.0
      with:
        setup-tools: kubectl

    # Run the verification script to confirm the Kubernetes API endpoint is reachable and nodes exist in the cluster
    - name: Verification
      run: ./verify.sh "${GITHUB_SHA:0:7}"
      working-directory: ./testing
  
    # Destroy the environment
    - name: Terraform Destroy
      if: always()
      run: terraform destroy -var commit_hash="${GITHUB_SHA:0:7}" -auto-approve
      working-directory: ./testing
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
