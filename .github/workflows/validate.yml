# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the main branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    #- name: Terraform Plan
    #  run: terraform plan

    - name: Generate Variables File
      run: echo "commit_hash = \"test-$(git rev-parse --short HEAD)\"" > test.auto.tfvars

    - name: Verify Variables File
      run: cat test.auto.tfvars

    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    #- name: Terraform Apply
    #  run: terraform apply -auto-approve
  
    #- name: Setup Google Cloud SDK
    #  uses: google-github-actions/setup-gcloud@master
    #  with:
    #    project_id: ${{ secrets.GCP_PROJECT }}
    #    service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
    #    export_default_credentials: true
  
    - name: Setup Kubectl
      uses: yokawasa/action-setup-kube-tools@v0.6.0
      with:
        setup-tools: kubectl

    #- name: Setup Kube Config File
    #  run: gcloud container clusters get-credentials "test-$(git rev-parse --short HEAD)" --region="${{ secrets.GCP_REGION }}"
        
    #- name: Setup SSH Tunnel
    #  run: |
    #    gcloud compute instance-groups managed resize "test-$(git rev-parse --short HEAD)-bastion" --region="${{ .secrets.GCP_REGION }}" --size=1
    #    instance="$(gcloud compute instance-groups managed list-instances "test-$(git rev-parse --short HEAD)-bastion" --region="${{ .secrets.GCP_REGION }}" --format="value(instance)")"
    #    echo '127.0.0.1 kubernetes' >> /etc/hosts
    #    kubernetes_endpoint="$(kubectl config view -o jsonpath='{.clusters[?(@.name == "gke_'${{ secrets.GCP_PROJECT }}_${{ secret.GCP_REGION }}_test-$(git rev-parse --short HEAD)'")].cluster.server}')"
    #    kubectl config set-cluster "gke_${{ secrets.GCP_PROJECT }}_${{ secrets.GCP_REGION }}_test-$(git rev-parse --short HEAD)" --server kubernetees:9443
    #    gcloud compute ssh "$instance" --project="${{ secrets.GCP_PROJECT }}" --region="${{ secrets.GCP_REGION }}" -- -L "9443:$kubernetes_endpoint:443" -N &
  
    # On push to main, tag the repository to create a module version.
    #- name: Tag Module
    #  if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #  run: terraform apply -auto-approve
