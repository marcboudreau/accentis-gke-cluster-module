name: 'Validate'

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  terraform:
    name: 'Validate'
    runs-on: ubuntu-latest
    environment: test

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./testing

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -var commit_hash="${GITHUB_SHA:0:7}"
      working-directory: ./testing
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: Terraform Apply
      run: terraform apply -auto-approve -var commit_hash="${GITHUB_SHA:0:7}"
      working-directory: ./testing
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
  
    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@master
      with:
        project_id: accentis-288921
        service_account_key: ${{ secrets.GOOGLE_CREDENTIALS }}
        export_default_credentials: true
  
    - name: Setup Kubectl
      uses: yokawasa/action-setup-kube-tools@v0.6.0
      with:
        setup-tools: kubectl

    - name: Setup Kube Config File
      run: gcloud container clusters get-credentials "test-${GITHUB_SHA:0:7}" --region=us-east1
        
    - name: Setup SSH Tunnel
      run: |
        gcloud compute instance-groups managed resize "test-${GITHUB_SHA:0:7}-bastion" --region=us-east1 --size=1
        instance="$(gcloud compute instance-groups managed list-instances "test-${GITHUB_SHA:0:7}-bastion" --region=us-east1 --format="value(instance)")"
        instance_zone="$(gcloud compute instance-groups managed list-instances test-${GITHUB_SHA:0:7}-bastion --project=accentis-288921 --region=us-east1 --format='value(instance.scope("zones").segment(0))')"
        kubernetes_endpoint="$(kubectl config view -o jsonpath='{.clusters[?(@.name == "gke_accentis-288921_us-east1_test-'${GITHUB_SHA:0:7}'")].cluster.server}')"
        kubectl config set-cluster "gke_accentis-288921_us-east1_test-${GITHUB_SHA:0:7}" --server localhost:9443 --insecure-skip-tls-verify=true
        echo "Kubernetes Endpoint: $kubernetes_endpoint"
        echo "Instance: $instance"
        echo "Instance Zone: $instance_zone"
        ssh-keygen -q -t rsa -b 2048 -N '' -f ~/.ssh/google_compute_engine
        gcloud compute ssh "$instance" --project=accentis-288921 --zone="$instance_zone" --strict-host-key-checking=no -- -L "9443:$kubernetes_endpoint:443" -N &
        echo -n "Waiting 5 seconds..."
        sleep 5
        echo " done"
        echo "Checking if nc is present: $(which nc)"
        kubectl cluster-info
        kubectl get nodes
  
    - name: Terraform Destroy
      if: always()
      run: terraform destroy -var commit_hash="${GITHUB_SHA:0:7}" -auto-approve
      working-directory: ./testing
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    # On push to main, tag the repository to create a module version.
    #- name: Tag Module
    #  if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #  run: terraform apply -auto-approve
